.................................................................
[ 1.6.10 kt ]

/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */
data class HTWDroid(val x: String = "")
fun main() {
    // mock input
    val arr1: List<String> = listOf("hdush", "adiusdh", "askhdj", "ncchsdch")
    // make mutable list of type HTWDroid
    val dataX: MutableList<HTWDroid> = mutableListOf() 
    val pattern = ("ad").toRegex()
    
    
    // 
    val match: Int = 0
    // assignment of input result to declared type HTWDroid()
    arr1.forEach{
        
        val internalX: HTWDroid = HTWDroid( x = it)
        // added to the list of typed objects
        dataX.add(internalX)
        println(it)
    }
    // tests
    println(dataX)
    // assignment of the result of getL 
    val z: Int = getL(dataX.get(1))
    
    println(z)
    // 
    dataX.forEach{
        // assignment of the result of count()
        val ii: Int = getL(it)
        
        val ax = it.x.contains(pattern)
        println("XXXXXXX" + ax)
        println(ii)
    }
    
    
	
}
fun getL(i: HTWDroid): Int{
    return i.x.count()
}



.................................................................
[ triple quoted strings]

  const val question = "life, the universe, and everything"
const val answer = 42
/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */
fun main() {
    // assignments and configurables
    
    
    val arrStr1: List<String> = listOf("abccasds", "daddcbacba", "abana")
    val arrStr2: MutableList<String?> = mutableListOf()
    var str1 = "daddcbacba"
    
    val str1Out: List<String?> = str1.split("")
    //val countStr1Out: Int = str1Out.count()
    arrStr2.addAll(str1Out)
    println(str1Out)
    val str1Out2 = arrStr2.filterNotNull()
    while (arrStr2.remove(null)){}
    while (arrStr2.remove("")) {}
    
    val xxii = removeNulls(arrStr2)
 	println("$$$: $xxii")
    println("CHECK dim1: $str1Out2")
    //val lsStr1: List<String> = listOf(str1Out)
    // make new mutable list and add ech char from str1
    //val insights1: MutableList<String> = mutableListOf(str1.split(","))
    
    var pattern = "\\w{3,4}".toRegex()
    val result = pattern.matchEntire(str1)
    println(result)
    val xStr = joinOptions(arrStr1)
    println(xStr)
}

fun <T> removeNulls(ls: MutableList<T>) {
    val itr = ls.iterator()
    while (itr.hasNext())
    {
        val curr: T? = itr.next()
        if (curr == null) {
            itr.remove() // remove nulls
        }
    }
}

fun joinOptions(
    options: Collection<String> 
): String {
    return options.joinToString(prefix = "[", postfix = "]")
}
  


.................................................................
[2/20/2022]


fun main(args: Array<String>) {
    
    // assignments and configurables
    
    val arrStr1: List<String> = listOf("abccasds", "daddcbacba", "abana")
    val arrStr2: MutableList<String?> = mutableListOf()
    val arrStr3: MutableList<String?> = mutableListOf()
    
    var str1 = "daddcbacba"
    val str2 = "abccadcb"
    
    
    var rangeStart = 0
    var rangeEnd = 0
    
    val regX = "\\[a-z]".toRegex()
    val mixedStr = str2.split("")
    	.filter { it.isNotBlank() }
    
    val iterateLsMixedStr = mixedStr.listIterator()
    while (iterateLsMixedStr.hasNext()){
        val xxStr = iterateLsMixedStr.next()
        println("TEST: $xxStr")
    }
        
    for (i in mixedStr.indices)
    {
        if (mixedStr.contains(mixedStr[i]))
        {
            println("II: $i")
            val iterator = mixedStr.iterator()
            for ((index, value) in iterator.withIndex()){
                println("The element at $index is $value")
            }
        }
        println(i)
    }

    val dMap = mixedStr.map { it.first() to it }.toMap()
    println("Mapped values: $dMap")
    val str1Out: List<String?> = str2.split("").filter { it.isNotBlank() }
    arrStr2.addAll(str1Out)
    println("Original string split to List: $str1Out")
    

    val xStr = joinOptions(arrStr1)
    println(xStr)
}

fun inCount(ls: List<String?>): Int {
    var c = 0
    for (i in 0 until ls.size)
    {
       c++
    }
    return c
}

fun <T> removeNulls(ls: MutableList<T>) {
    val itr = ls.iterator()
    while (itr.hasNext())
    {
        val curr: T? = itr.next()
        if (curr == null) {
            itr.remove() // remove nulls
        }
    }
}

fun joinOptions(
    options: Collection<String> 
): String {
    return options.joinToString(prefix = "[", postfix = "]")
}


.................................................................
[]


fun main(args: Array<String>) {
    
    // assignments and configurables
    
    val arrStr1: List<String> = listOf("abccasds", "daddcbacba", "abana")
    val arrStr2: MutableList<String?> = mutableListOf()
    val arrStr3: MutableList<String> = mutableListOf()
    
    var str1 = "daddcbacba"
    val str2 = "abccadcb"
    
    
    var rangeStart = 0
    var rangeEnd = 0
    
    val regX = "\\[a-z]".toRegex()
    val mixedStr = str2.split("")
    	.filter { it.isNotBlank() }
    for (i in mixedStr.indices)
    {
        arrStr3.add(mixedStr[i])
    }
    println("MUTABLE List STring 3: $arrStr3")
      
    for (i in arrStr3.indices)
    {
        // need to test if the list has more than 1
        // occurence of the current index i
        val pattern = arrStr3[i]
        val i = Regex(pattern).findAll(str2)
        	.map { it.range.first }
            .toList()
        	//ap { it.range.first }
            //oList()
        println("XXXXXXXXXX: $i")
    }

    val dMap = mixedStr.map { it.first() to it }.toMap()
    println("Mapped values: $dMap")
    val str1Out: List<String?> = str2.split("").filter { it.isNotBlank() }
    arrStr2.addAll(str1Out)
    println("Original string split to List: $str1Out")
    

    val xStr = joinOptions(arrStr1)
    println(xStr)
}

fun inCount(ls: List<String?>): Int {
    var c = 0
    for (i in 0 until ls.size)
    {
       c++
    }
    return c
}

fun <T> removeNulls(ls: MutableList<T>) {
    val itr = ls.iterator()
    while (itr.hasNext())
    {
        val curr: T? = itr.next()
        if (curr == null) {
            itr.remove() // remove nulls
        }
    }
}

fun joinOptions(
    options: Collection<String> 
): String {
    return options.joinToString(prefix = "[", postfix = "]")
}


.................................................................
[ get substring, remove in 1 move, print number of moves left to remove the rest]

fun main(args: Array<String>) {
    
    // assignments and configurables
    
    val arrStr1: List<String> = listOf("abccasds", "daddcbacba", "abana")
    val arrStr2: MutableList<String?> = mutableListOf()
    val arrStr3: MutableList<String> = mutableListOf()
    
    var str1 = "daddcbacba"
    val str2 = "abccadcb"
    
    
    var rangeStart = 0
    var rangeEnd = 0
    
    val regX = "\\[a-z]".toRegex()
    val mixedStr = str2.split("")
    	.filter { it.isNotBlank() }
    for (i in mixedStr.indices)
    {
        arrStr3.add(mixedStr[i])
    }
    println("MUTABLE List STring 3: $arrStr3")
      
    for (i in arrStr3.indices)
    {
        // need to test if the list has more than 1
        // occurence of the current index i
        val pattern = arrStr3[i]
        val i = Regex(pattern).findAll(str2)
        	.map { it.range.first }
            .toList()
        println("XXXXXXXXXX: $i")
        rangeStart = i[0]
    }
    
    println("RANGE START: $rangeStart")

    val dMap = mixedStr.map { it.first() to it }.toMap()
    println("Mapped values: $dMap")
    val str1Out: List<String?> = str2.split("").filter { it.isNotBlank() }
    arrStr2.addAll(str1Out)
    println("Original string split to List: $str1Out")


.................................................................
[]

/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */
fun main() {
// run 3 iteraions
    // 5,1,2,34
    // 45123
    // 34512
    // bring last int from last to first
    // read 5 indexes
    var counter: Int = 0
    var arr: List<Int> = listOf(1,2,3,4,5)
    var tmpArr: MutableList<Int> = mutableListOf()
    var xx: Int = 0
    // loop 3x
    while (counter < 3) {
        // loop through and reorder or pluck last
        if (counter == 0)
        {
            val ii: Int = arr.last()
            val arr4 = arr[3]
            val arr3 = arr[2]
            val arr2 = arr[1]
            val arr1 = arr[0]
          tmpArr.add(ii)
            tmpArr.add(arr1)
            tmpArr.add(arr2)
            tmpArr.add(arr3)
            tmpArr.add(arr4)
           
            println(tmpArr.toString())
    }
        else
        {
            // get last indice from associative structure
            val ii: Int = tmpArr.last()
            val arr4 = tmpArr[3]
            val arr3 = tmpArr[2]
            val arr2 = tmpArr[1]
            val arr1 = tmpArr[0]
            tmpArr.clear()
            tmpArr.add(ii)
            tmpArr.add(arr1)
            tmpArr.add(arr2)
            tmpArr.add(arr3)
            tmpArr.add(arr4)
           
            println(tmpArr.toString())
        }
        counter++
    }
}


.................................................................
[koan]

	val m = "(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)"

	fun getPattern() = """\d{2} $m \d{4}"""

	fun main(args: Array<String>){
		println("27 FEB 1985".matches(getPattern().toRegex()))
	}
	.................................................................
[]

	(+) Explicitly check null
	val l = if (b != null) b.length else -1
.................................................................
[]


fun main() {
	
    val b: String? = "Kotlin"
	// more complex checks canbe made only if b is immutable
	// which  (meaning it is a local variable that is not modified 
	// between the check and its usage or it is a member val 
	// that has a backing field and is not overridable)
    if (b != null && b.length > 0) {
        print("String of length ${b.length}")
    } else {
        print("Empty string")
    }
}
.................................................................
[]

data class XGen(
    val i0: Int = 0,
    val i1: Int? = 1,
)
fun main(args: Array<String>) {
    
    // assignments and configurables
    
    val arrStr1: List<String> = listOf("abccasds", "daddcbacba", "abana")
    val arrStr2: MutableList<String?> = mutableListOf()
    val arrStr3: MutableList<String> = mutableListOf()
    val arrStrData1: MutableList<XGen> = mutableListOf()
    var rangeHolderLs: MutableList<List<Int>> = mutableListOf()
    
    
    var str1 = "daddcbacba"
    var str2 = "abccadcb"
    
    
    var rangeStart = 0
    var rangeEnd = 0
    val arrLsRange1: ArrayList<String> = arrayListOf()
    
    val regX = "\\[a-z]".toRegex()
    val mixedStr = str2.split("")
    	.filter { it.isNotBlank() }
    for (i in mixedStr.indices)
    {
        arrStr3.add(mixedStr[i])
    }
    println("MUTABLE List STring 3: $arrStr3")
      
    for (i in arrStr3.indices)
    {
        // need to test if the list has more than 1
        // occurence of the current index i
        val pattern = arrStr3[i]
        val iX: MutableList<Int> = Regex(pattern).findAll(str2)
        	.map { it.range.first }
            .toMutableList()
        println("XXXXXXXXXX: $iX")
        rangeHolderLs.add(iX)
		//for (index in 0 until iX.size){}
        //val xin = XGen(i0 = iX[0], i1 = iX[1])
       	//arrStrData1.add(xin)
    }
    
    println("RANGE START: $rangeStart")

    val dMap = mixedStr.map { it.first() to it }.toMap()
    println("Mapped values: $dMap")
    val str1Out: List<String?> = str2.split("").filter { it.isNotBlank() }
    arrStr2.addAll(str1Out)
    println("Original string split to List: $str1Out")
    
    // equality
    var a: String = "XXiixxII"
    var b: String = "zz"
    println("String a: $a , string b: $b")
    
    val convertLs = rangeHolderLs.flatten()
    val removeRangeStart: Int = convertLs.get(0)
    val removeRangeEnd: Int = 1+convertLs.get(1)
    val subStr1 = str2.subSequence(removeRangeStart,removeRangeEnd)
    var sub2 = str2.removeRange(removeRangeStart,removeRangeEnd)
    println("String after first patternized removal $sub2")
    println("SUB STR TO REMOVE FIRST: $subStr1")
    println("FLAT MAP RANGE index 1: ${removeRangeStart} index2: ${removeRangeEnd}")
    println("RANGE HOLDER FIRST INDEX: ${rangeHolderLs.get(0)}")
}
.................................................................
[]

data class XGen(
    val i0: Int = 0,
    val i1: Int? = 1,
)
fun main(args: Array<String>) {
    
    // assignments and configurables
    
    val arrStr1: List<String> = listOf("abccasds", "daddcbacba", "abana")
    val arrStr2: MutableList<String?> = mutableListOf()
    val arrStr3: MutableList<String> = mutableListOf()
    val arrStrData1: MutableList<XGen> = mutableListOf()
    var rangeHolderLs: MutableList<List<Int>> = mutableListOf()
    
    var str1 = "daddcbacba"
    var str2 = "abccadcb"
    
    
    var rangeStart = 0
    var rangeEnd = 0
    val arrLsRange1: ArrayList<String> = arrayListOf()
    
    val regX = "\\[a-z]".toRegex()
    val mixedStr = str2.split("")
    	.filter { it.isNotBlank() }
    for (i in mixedStr.indices)
    {
        arrStr3.add(mixedStr[i])
    }
    println("MUTABLE List STring 3: $arrStr3")
      
    for (i in arrStr3.indices)
    {
        // need to test if the list has more than 1
        // occurence of the current index i
        val pattern = arrStr3[i]
        val iX: MutableList<Int> = Regex(pattern).findAll(str2)
        	.map { it.range.first }
            .toMutableList()
        println("XXXXXXXXXX: $iX")
        rangeHolderLs.add(iX)
		//for (index in 0 until iX.size){}
        //val xin = XGen(i0 = iX[0], i1 = iX[1])
       	//arrStrData1.add(xin)
    }
    
    println("arrStr3 :  $arrStr3")

    val dMap = mixedStr.map { it.first() to it }.toMap()
    println("Mapped values: $dMap")
    val str1Out: List<String?> = str2.split("").filter { it.isNotBlank() }
    arrStr2.addAll(str1Out)
    println("Original string split to List: $str1Out")
    
    // equality
    var a: String = "XXiixxII"
    var b: String = "zz"
    println("String a: $a , string b: $b")
    
    val convertLs = rangeHolderLs.flatten()
    val removeRangeStart: Int = convertLs.get(0)
    val removeRangeEnd: Int = 1+convertLs.get(1)
    val subStr1 = str2.subSequence(removeRangeStart,removeRangeEnd)
    val sub2 = str2.removeRange(removeRangeStart,removeRangeEnd)
    val mod = sub2.toString()
    val sub2Ls = sub2.toList()
    for (i in sub2Ls.indices)
    {
       val p = sub2Ls[i]
       
       println("YYYYYYY: ${p} : mod ${mod}")
       //rangeHolderLs.add(iY)
    }
    println("String after first patternized removal $sub2")
    println("SUB STR TO REMOVE FIRST: $subStr1")
    println("FLAT MAP RANGE index 1: ${removeRangeStart} index2: ${removeRangeEnd}")
    println("RANGE HOLDER FIRST INDEX: ${rangeHolderLs.get(0)}")
    
}

.................................................................
[]

// you can also use imports, for example:
// import kotlin.math.*

// you can write to stdout for debugging purposes, e.g.
// println("this is a debug message")

fun solution(A: IntArray): Int {
    // write your code in Kotlin 1.3.11 (Linux)

    // arr A of X amount of Int
    // returns the smallest Int, which doesn't occur in A
    val arrA: MutableList<Int> = A.toMutableList()
    val arr1Mem: List<Int> = arrA.sortedBy { it -> it }
    val lastI: Int = 1+arr1Mem.last()
    var counter = 0
    var tmp = 0
    for ( i in arr1Mem.indices)
    {
        if (arr1Mem.contains(i))
        {
            tmp = i
        }
        counter++
    }
    if (lastI < counter )
    {
        return lastI
    }
    else
    {
        return counter-1
    }


}
.................................................................
[ hashmap ]

/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */

fun main() {
    // assign target
    val target: Int = 6
    // pattern reg expr
    var pattern: Int = 0
    
    // assign array of ints
    val arr1: List<Int> = listOf(3,3,4,2,1,2,5,3)
    val xArr: MutableList<Int> = mutableListOf()
   	
    println("TEST")
    xArr.add(arr1.get(0))
    xArr.add(arr1.get(1))
    println(xArr)
    pattern = getX(target,xArr.toList())
    println(pattern)
    val hash: HashMap<>
    
}

fun getX(x: Int, arr: List<Int>): Int {
    val flag: Int = x
    val pattern: Int = arr.get(0)+arr.get(1)
    return if ( flag == pattern ) pattern else return 1
    
    //val lsFlag: MutableList<Int> = mutableListOf()

}

.................................................................
[ hashmap ]


/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */

fun main() {
    // assign target
    val target: Int = 6
    // pattern reg expr
    var pattern: Int = 0
    
    // assign array of ints
    val arr1: List<Int> = listOf(3,3,4,2,1,2,5,3)
    val xArr: MutableList<Int> = mutableListOf()
   	
    println("TEST")
    xArr.add(arr1.get(0))
    xArr.add(arr1.get(1))
    println(xArr)
    pattern = getX(target,xArr.toList())
    println(pattern)
    val hash: HashMap<>
    
}

fun getX(x: Int, arr: List<Int>): Int {
    val flag: Int = x
    val pattern: Int = arr.get(0)+arr.get(1)
    return if ( flag == pattern ) pattern else return 1
    
    //val lsFlag: MutableList<Int> = mutableListOf()

}

.................................................................
[]
